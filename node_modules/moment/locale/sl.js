//! moment.js locale configuration
//! locale : Slovenian [sl]
//! author : Robert Sedovšek : https://github.com/sedovsek
(function (global, factory) {
    if (typeof exports === 'object' && typeof module !== 'undefined' && typeof require === 'function') {
        factory(require('../moment'));
    } else {
        if (typeof define === 'function' && define.amd) {
            define(['../moment'], factory);
        } else {
            factory(global.moment);
        }
    }
})(this, function (moment) {
    'use strict'; //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';

        switch (key) {
            case 's':
                return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';

            case 'ss':
                if (number === 1) {
                    if (withoutSuffix) {
                        result += 'sekundo';
                    } else {
                        result += 'sekundi';
                    }
                } else {
                    if (number === 2) {
                        if (withoutSuffix || isFuture) {
                            result += 'sekundi';
                        } else {
                            result += 'sekundah';
                        }
                    } else {
                        if (number < 5) {
                            if (withoutSuffix || isFuture) {
                                result += 'sekunde';
                            } else {
                                result += 'sekundah';
                            }
                        } else {
                            result += 'sekund';
                        }
                    }
                }

                return result;

            case 'm':
                return withoutSuffix ? 'ena minuta' : 'eno minuto';

            case 'mm':
                if (number === 1) {
                    if (withoutSuffix) {
                        result += 'minuta';
                    } else {
                        result += 'minuto';
                    }
                } else {
                    if (number === 2) {
                        if (withoutSuffix || isFuture) {
                            result += 'minuti';
                        } else {
                            result += 'minutama';
                        }
                    } else {
                        if (number < 5) {
                            if (withoutSuffix || isFuture) {
                                result += 'minute';
                            } else {
                                result += 'minutami';
                            }
                        } else {
                            if (withoutSuffix || isFuture) {
                                result += 'minut';
                            } else {
                                result += 'minutami';
                            }
                        }
                    }
                }

                return result;

            case 'h':
                return withoutSuffix ? 'ena ura' : 'eno uro';

            case 'hh':
                if (number === 1) {
                    if (withoutSuffix) {
                        result += 'ura';
                    } else {
                        result += 'uro';
                    }
                } else {
                    if (number === 2) {
                        if (withoutSuffix || isFuture) {
                            result += 'uri';
                        } else {
                            result += 'urama';
                        }
                    } else {
                        if (number < 5) {
                            if (withoutSuffix || isFuture) {
                                result += 'ure';
                            } else {
                                result += 'urami';
                            }
                        } else {
                            if (withoutSuffix || isFuture) {
                                result += 'ur';
                            } else {
                                result += 'urami';
                            }
                        }
                    }
                }

                return result;

            case 'd':
                return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';

            case 'dd':
                if (number === 1) {
                    if (withoutSuffix || isFuture) {
                        result += 'dan';
                    } else {
                        result += 'dnem';
                    }
                } else {
                    if (number === 2) {
                        if (withoutSuffix || isFuture) {
                            result += 'dni';
                        } else {
                            result += 'dnevoma';
                        }
                    } else {
                        if (withoutSuffix || isFuture) {
                            result += 'dni';
                        } else {
                            result += 'dnevi';
                        }
                    }
                }

                return result;

            case 'M':
                return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';

            case 'MM':
                if (number === 1) {
                    if (withoutSuffix || isFuture) {
                        result += 'mesec';
                    } else {
                        result += 'mesecem';
                    }
                } else {
                    if (number === 2) {
                        if (withoutSuffix || isFuture) {
                            result += 'meseca';
                        } else {
                            result += 'mesecema';
                        }
                    } else {
                        if (number < 5) {
                            if (withoutSuffix || isFuture) {
                                result += 'mesece';
                            } else {
                                result += 'meseci';
                            }
                        } else {
                            if (withoutSuffix || isFuture) {
                                result += 'mesecev';
                            } else {
                                result += 'meseci';
                            }
                        }
                    }
                }

                return result;

            case 'y':
                return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';

            case 'yy':
                if (number === 1) {
                    if (withoutSuffix || isFuture) {
                        result += 'leto';
                    } else {
                        result += 'letom';
                    }
                } else {
                    if (number === 2) {
                        if (withoutSuffix || isFuture) {
                            result += 'leti';
                        } else {
                            result += 'letoma';
                        }
                    } else {
                        if (number < 5) {
                            if (withoutSuffix || isFuture) {
                                result += 'leta';
                            } else {
                                result += 'leti';
                            }
                        } else {
                            if (withoutSuffix || isFuture) {
                                result += 'let';
                            } else {
                                result += 'leti';
                            }
                        }
                    }
                }

                return result;
        }
    }

    var sl = moment.defineLocale('sl', {
        months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays: 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
        weekdaysShort: 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
        weekdaysMin: 'ne_po_to_sr_če_pe_so'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danes ob] LT',
            nextDay: '[jutri ob] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v] [nedeljo] [ob] LT';

                    case 3:
                        return '[v] [sredo] [ob] LT';

                    case 6:
                        return '[v] [soboto] [ob] LT';

                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[v] dddd [ob] LT';
                }
            },
            lastDay: '[včeraj ob] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[prejšnjo] [nedeljo] [ob] LT';

                    case 3:
                        return '[prejšnjo] [sredo] [ob] LT';

                    case 6:
                        return '[prejšnjo] [soboto] [ob] LT';

                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prejšnji] dddd [ob] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'čez %s',
            past: 'pred %s',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1,
            // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 7th is the first week of the year.
        }
    });
    return sl;
});
